import os, sys, re
import shlex, argparse

def main(fname):
    sys.stdout.write(convert_from_file(fname) + '\n')

def convert_from_file(path):
    """
    Given a path to a .curlrc file, generates and returns
    a command-line curl statement.
    """
    full_cmd = 'curl '
    with open(path, 'r') as conf:
        for line in conf.readlines():
            if len(line.strip()) > 0:
                if line.strip()[0] != '#': # if not comment line
                    line = line.strip()
                    opt_val = map(lambda x: x.strip(), line.split(' = '))
                    if len(opt_val) > 1:
                        opt, val = opt_val
                        val = val.strip('\"')
                    else:
                        opt, val = opt_val[0], None
                    if opt[0] != '-': # if not shortcut, prefix --
                        opt = '--' + opt
                    # append to full command
                    full_cmd += '{} '.format(opt)
                    full_cmd += '{} '.format(val) if val else ''
    
    return full_cmd

def convert_to_file(curl_str):
    parser = argparse.ArgumentParser()
    parser.add_argument('command')
    parser.add_argument('url', nargs='?') # make this optional
    parser.add_argument('-d', '--data')
    parser.add_argument('-o', '--output', default=None)
    parser.add_argument('--data-binary', default=None) #JMW changed
    parser.add_argument('-H', '--header', action='append', default=[])
    parser.add_argument('--compressed', action='store_true')
    parser.add_argument('-k', '--insecure', action='store_true') #JMW
    parser.add_argument('-b', '--cookie', default=None) # JMW
    parser.add_argument('-c', '--cookie-jar', default=None) # JMW
    parser.add_argument('-L', '--location', action='store_true') # JMW
    parser.add_argument('-K', '--config', nargs='?',
                    const='.curlrc') # JMW
    parser.add_argument('--url')
    parser.add_argument('-O','--remote-name', action='store_true')
    
    tokens = shlex.split(curl_str)
    parsed_args = parser.parse_args(tokens)

    result = '# This file was generated by {}\n'.format(os.path.basename(__file__))
    vals_dict = vars(parsed_args)
    for opt in vals_dict:
        val = vals_dict[opt]
        if val is not None:
            if opt != 'command':
                if val == True:
                    result += '{}\n'.format(opt)
                elif val != False:
                    result += '{} = \"{}\"\n'.format(opt, val)

    return result
   

if __name__ == '__main__':
    main(sys.argv[1])
